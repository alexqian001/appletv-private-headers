/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "AppleTV-Structs.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSData, NSLock, NSDictionary, NSMutableArray, NSTimer, NSString;

@interface NetflixPlaybackManager : XXUnknownSuperclass {
	BOOL openNotificationSent_;	// 4 = 0x4
	BOOL subtitlesProcessing_;	// 5 = 0x5
	BOOL playbackCommandInProgress_;	// 6 = 0x6
	BOOL pollNetworkInterface_;	// 7 = 0x7
	bool stalled_;	// 8 = 0x8
	BOOL trickplayIsOn_;	// 9 = 0x9
	NSDictionary *movieDetails_;	// 12 = 0xc
	NSData *playReadyKey_;	// 16 = 0x10
	IMediaControl *mediaControl_;	// 20 = 0x14
	NetflixMediaControlListener *mediaControlListener_;	// 24 = 0x18
	NSMutableArray *errorStack_;	// 28 = 0x1c
	NSDictionary *reportableActionId_;	// 32 = 0x20
	NSLock *subtitlesProcessingLock_;	// 36 = 0x24
	int subtitlesTrackIndex_;	// 40 = 0x28
	int audioTrackIndex_;	// 44 = 0x2c
	NSLock *playbackCommandLock_;	// 48 = 0x30
	int state_;	// 52 = 0x34
	unsigned lastKnownMappedVideoBitrate_;	// 56 = 0x38
	unsigned lastNumAccessLogEvents_;	// 60 = 0x3c
	BwEntry *bwEntry_;	// 64 = 0x40
	int networkInterfaceType_;	// 68 = 0x44
	int totalNumberOfStalls_;	// 72 = 0x48
	NSString *audioSelectLanguage_;	// 76 = 0x4c
	NSTimer *audioSelectTimer_;	// 80 = 0x50
	long long totalBytesTransferred_;	// 84 = 0x54
	double observedBitrate_;	// 92 = 0x5c
	long long pollBytesStart_;	// 100 = 0x64
	double lastBwEntryTime_;	// 108 = 0x6c
	long long lastBwEntryBytes_;	// 116 = 0x74
	long long bufferingStartBytes_;	// 124 = 0x7c
	double bufferingStartTime_;	// 132 = 0x84
	double sampleReportWindow_;	// 140 = 0x8c
	double audioSelectTimeCount_;	// 148 = 0x94
}
@property(retain, nonatomic) NSString *audioSelectLanguage;	// G=0x60c3e9; S=0x60c3f9; @synthesize=audioSelectLanguage_
@property(assign, nonatomic) double audioSelectTimeCount;	// G=0x60c429; S=0x60c441; @synthesize=audioSelectTimeCount_
@property(retain, nonatomic) NSTimer *audioSelectTimer;	// G=0x60c409; S=0x60c419; @synthesize=audioSelectTimer_
@property(assign, nonatomic) int audioTrackIndex;	// G=0x60c0d9; S=0x60c0e9; @synthesize=audioTrackIndex_
@property(readonly, assign, nonatomic) unsigned bitrate;	// G=0x60bcd9; 
@property(assign, nonatomic) long long bufferingStartBytes;	// G=0x60c2f5; S=0x60c30d; @synthesize=bufferingStartBytes_
@property(assign, nonatomic) double bufferingStartTime;	// G=0x60c321; S=0x60c339; @synthesize=bufferingStartTime_
@property(assign, nonatomic) BwEntry *bwEntry;	// G=0x60c25d; S=0x60c26d; @synthesize=bwEntry_
@property(readonly, assign, nonatomic) long long bytes;	// G=0x60bd1d; 
@property(readonly, assign, nonatomic) long long bytesForInterface;	// G=0x60bd81; 
@property(readonly, assign, nonatomic) unsigned currentStreamBitrate;	// G=0x60be45; 
@property(retain, nonatomic) NSMutableArray *errorStack;	// G=0x60c025; S=0x60c035; @synthesize=errorStack_
@property(assign, nonatomic) long long lastBwEntryBytes;	// G=0x60c2a9; S=0x60c2c1; @synthesize=lastBwEntryBytes_
@property(assign, nonatomic) double lastBwEntryTime;	// G=0x60c27d; S=0x60c295; @synthesize=lastBwEntryTime_
@property(assign, nonatomic) unsigned lastKnownMappedVideoBitrate;	// G=0x60c179; S=0x60c189; @synthesize=lastKnownMappedVideoBitrate_
@property(assign, nonatomic) unsigned lastNumAccessLogEvents;	// G=0x60c199; S=0x60c1a9; @synthesize=lastNumAccessLogEvents_
@property(assign, nonatomic) IMediaControl *mediaControl;	// G=0x60c005; S=0x6061c1; @synthesize=mediaControl_
@property(assign, nonatomic) NetflixMediaControlListener *mediaControlListener;	// G=0x60c015; S=0x6062d5; @synthesize=mediaControlListener_
@property(retain) NSDictionary *movieDetails;	// G=0x60bfbd; S=0x60bfd1; @synthesize=movieDetails_
@property(assign, nonatomic) int networkInterfaceType;	// G=0x60c2d5; S=0x60c2e5; @synthesize=networkInterfaceType_
@property(assign, nonatomic) double observedBitrate;	// G=0x60c1e5; S=0x60c1fd; @synthesize=observedBitrate_
@property(assign, nonatomic) BOOL openNotificationSent;	// G=0x60bf9d; S=0x60bfad; @synthesize=openNotificationSent_
@property(copy) NSData *playReadyKey;	// G=0x60bfe1; S=0x60bff5; @synthesize=playReadyKey_
@property(assign) BOOL playbackCommandInProgress;	// G=0x60c11d; S=0x60c135; @synthesize=playbackCommandInProgress_
@property(retain) NSLock *playbackCommandLock;	// G=0x60c0f9; S=0x60c10d; @synthesize=playbackCommandLock_
@property(assign, nonatomic) long long pollBytesStart;	// G=0x60c231; S=0x60c249; @synthesize=pollBytesStart_
@property(assign, nonatomic) BOOL pollNetworkInterface;	// G=0x60c211; S=0x60c221; @synthesize=pollNetworkInterface_
@property(retain, nonatomic) NSDictionary *reportableActionId;	// G=0x60c045; S=0x60c055; @synthesize=reportableActionId_
@property(assign, nonatomic) double sampleReportWindow;	// G=0x60c34d; S=0x60c365; @synthesize=sampleReportWindow_
@property(assign, nonatomic) bool stalled;	// G=0x60c379; S=0x60c389; @synthesize=stalled_
@property(assign) int state;	// G=0x60c14d; S=0x60c161; @synthesize=state_
@property(assign) BOOL subtitlesProcessing;	// G=0x60c089; S=0x60c0a1; @synthesize=subtitlesProcessing_
@property(retain) NSLock *subtitlesProcessingLock;	// G=0x60c065; S=0x60c079; @synthesize=subtitlesProcessingLock_
@property(assign, nonatomic) int subtitlesTrackIndex;	// G=0x60c0b9; S=0x60c0c9; @synthesize=subtitlesTrackIndex_
@property(assign, nonatomic) long long totalBytesTransferred;	// G=0x60c1b9; S=0x60c1d1; @synthesize=totalBytesTransferred_
@property(assign, nonatomic) int totalNumberOfStalls;	// G=0x60c399; S=0x60c3a9; @synthesize=totalNumberOfStalls_
@property(assign) BOOL trickplay;	// G=0x60bf85; S=0x60bf75; converted property
@property(assign) BOOL trickplayIsOn;	// G=0x60c3b9; S=0x60c3d1; @synthesize=trickplayIsOn_
+ (void)initialize;	// 0x605e89
+ (id)sharedInstance;	// 0x605e8d
- (id)init;	// 0x605f79
- (void)audioSelect:(id)select;	// 0x607e19
- (void)audioSelectAsync:(id)async;	// 0x608b59
- (BOOL)audioSelectAvailable;	// 0x607e55
// declared property getter: - (id)audioSelectLanguage;	// 0x60c3e9
// declared property getter: - (double)audioSelectTimeCount;	// 0x60c429
// declared property getter: - (id)audioSelectTimer;	// 0x60c409
// declared property getter: - (int)audioTrackIndex;	// 0x60c0d9
// declared property getter: - (unsigned)bitrate;	// 0x60bcd9
- (void)buffering:(double)buffering;	// 0x6068c1
- (void)bufferingComplete:(double)complete;	// 0x6069d9
// declared property getter: - (long long)bufferingStartBytes;	// 0x60c2f5
// declared property getter: - (double)bufferingStartTime;	// 0x60c321
// declared property getter: - (BwEntry *)bwEntry;	// 0x60c25d
// declared property getter: - (long long)bytes;	// 0x60bd1d
// declared property getter: - (long long)bytesForInterface;	// 0x60bd81
- (void)cancelUpdateTimer;	// 0x608a31
- (id)capitalizeAudioTracksArray:(id)array;	// 0x6093e5
- (id)capitalizeSubtitlesForMovieDetails:(id)movieDetails;	// 0x6094d5
- (id)capitalizeSubtitlesForTrackCombinationArray:(id)trackCombinationArray;	// 0x6092f5
- (id)capitalizeTrackCombination:(id)combination;	// 0x609221
- (id)capitalizeTracks:(id)tracks;	// 0x609131
- (void)clearErrorStack;	// 0x60bf4d
- (void)close;	// 0x6067c9
- (id)createErrorFromStack;	// 0x609839
// declared property getter: - (unsigned)currentStreamBitrate;	// 0x60be45
- (void)dealloc;	// 0x6060ad
- (void)end:(double)end reason:(id)reason;	// 0x606591
// declared property getter: - (id)errorStack;	// 0x60c025
- (int)fetchBookmark:(id)bookmark;	// 0x60b9e9
- (void)getAppCert;	// 0x608bc5
- (void)getFpsCkc:(id)ckc forAssetId:(id)assetId;	// 0x608df5
- (id)getFpsCkcWithSpcData:(id)spcData forAssetId:(id)assetId;	// 0x608fa1
// declared property getter: - (long long)lastBwEntryBytes;	// 0x60c2a9
// declared property getter: - (double)lastBwEntryTime;	// 0x60c27d
// declared property getter: - (unsigned)lastKnownMappedVideoBitrate;	// 0x60c179
// declared property getter: - (unsigned)lastNumAccessLogEvents;	// 0x60c199
// declared property getter: - (IMediaControl *)mediaControl;	// 0x60c005
// declared property getter: - (NetflixMediaControlListener *)mediaControlListener;	// 0x60c015
- (void)mediaDidAcquireLicense;	// 0x609e49
- (void)mediaDidAuthorize;	// 0x609d19
- (void)mediaDidBuildPlaylists;	// 0x609ee1
- (void)mediaDidCdnSelect;	// 0x609db1
- (void)mediaDidClose;	// 0x609681
- (void)mediaDidFailLoadSubtitles:(int)media error:(id)error;	// 0x60a095
- (void)mediaDidFailOpen:(id)media;	// 0x609b91
- (void)mediaDidHandleNccpError:(id)media;	// 0x6096f5
- (void)mediaDidLoadSubtitles:(id)media;	// 0x609fc5
- (void)mediaDidSelectAudio:(id)media allowsOff:(BOOL)off;	// 0x60be7d
- (void)mediaDidSetSpeed:(float)media;	// 0x609f2d
- (void)mediaOpenComplete:(id)complete;	// 0x6095a9
- (id)mediaTypeForRequestedM3u8:(id)requestedM3u8;	// 0x60772d
- (void)mediaWillAcquireLicense;	// 0x609dfd
- (void)mediaWillAuthorize;	// 0x609ccd
- (void)mediaWillBuildPlaylists;	// 0x609e95
- (void)mediaWillCdnSelect;	// 0x609d65
- (void)mediaWillLoadSubtitles;	// 0x609fc1
// declared property getter: - (id)movieDetails;	// 0x60bfbd
- (id)nameForRequestedM3u8:(id)requestedM3u8;	// 0x60770d
// declared property getter: - (int)networkInterfaceType;	// 0x60c2d5
- (void)networkSelection:(id)selection;	// 0x607bb9
- (int)networkTypeStringToType:(id)type;	// 0x607b45
// declared property getter: - (double)observedBitrate;	// 0x60c1e5
- (void)open:(id)open;	// 0x6062f9
- (void)openAsync:(id)async;	// 0x60a4c9
// declared property getter: - (BOOL)openNotificationSent;	// 0x60bf9d
- (void)pause:(double)pause;	// 0x6063b1
- (void)play:(double)play;	// 0x606339
// declared property getter: - (id)playReadyKey;	// 0x60bfe1
// declared property getter: - (BOOL)playbackCommandInProgress;	// 0x60c11d
// declared property getter: - (id)playbackCommandLock;	// 0x60c0f9
- (id)playlistForIndicatedBitrate:(double)indicatedBitrate;	// 0x60bb6d
- (id)playlistForRequestedM3u8:(id)requestedM3u8;	// 0x60774d
// declared property getter: - (long long)pollBytesStart;	// 0x60c231
// declared property getter: - (BOOL)pollNetworkInterface;	// 0x60c211
- (void)postMediaCloseFailure;	// 0x60a3c5
- (void)postMediaOpenFailure:(int)failure;	// 0x60a215
- (void)postMediaOpenFailure:(id)failure clearProgress:(BOOL)progress;	// 0x60a2ed
- (void)postMediaOpenSuccess:(id)success;	// 0x60a179
// declared property getter: - (id)reportableActionId;	// 0x60c045
- (void)reposition:(double)reposition;	// 0x6064a1
- (void)resetUpdateTimer;	// 0x608a71
// declared property getter: - (double)sampleReportWindow;	// 0x60c34d
- (void)selectedPlaylist:(id)playlist;	// 0x60791d
// declared property setter: - (void)setAudioSelectLanguage:(id)language;	// 0x60c3f9
// declared property setter: - (void)setAudioSelectTimeCount:(double)count;	// 0x60c441
// declared property setter: - (void)setAudioSelectTimer:(id)timer;	// 0x60c419
// declared property setter: - (void)setAudioTrackIndex:(int)index;	// 0x60c0e9
// declared property setter: - (void)setBufferingStartBytes:(long long)bytes;	// 0x60c30d
// declared property setter: - (void)setBufferingStartTime:(double)time;	// 0x60c339
// declared property setter: - (void)setBwEntry:(BwEntry *)entry;	// 0x60c26d
// declared property setter: - (void)setErrorStack:(id)stack;	// 0x60c035
// declared property setter: - (void)setLastBwEntryBytes:(long long)bytes;	// 0x60c2c1
// declared property setter: - (void)setLastBwEntryTime:(double)time;	// 0x60c295
// declared property setter: - (void)setLastKnownMappedVideoBitrate:(unsigned)bitrate;	// 0x60c189
// declared property setter: - (void)setLastNumAccessLogEvents:(unsigned)events;	// 0x60c1a9
// declared property setter: - (void)setMediaControl:(IMediaControl *)control;	// 0x6061c1
// declared property setter: - (void)setMediaControlListener:(NetflixMediaControlListener *)listener;	// 0x6062d5
// declared property setter: - (void)setMovieDetails:(id)details;	// 0x60bfd1
// declared property setter: - (void)setNetworkInterfaceType:(int)type;	// 0x60c2e5
// declared property setter: - (void)setObservedBitrate:(double)bitrate;	// 0x60c1fd
// declared property setter: - (void)setOpenNotificationSent:(BOOL)sent;	// 0x60bfad
// declared property setter: - (void)setPlayReadyKey:(id)key;	// 0x60bff5
// declared property setter: - (void)setPlaybackCommandInProgress:(BOOL)progress;	// 0x60c135
// declared property setter: - (void)setPlaybackCommandLock:(id)lock;	// 0x60c10d
// declared property setter: - (void)setPollBytesStart:(long long)start;	// 0x60c249
// declared property setter: - (void)setPollNetworkInterface:(BOOL)interface;	// 0x60c221
// declared property setter: - (void)setReportableActionId:(id)anId;	// 0x60c055
// declared property setter: - (void)setSampleReportWindow:(double)window;	// 0x60c365
// declared property setter: - (void)setStalled:(bool)stalled;	// 0x60c389
// declared property setter: - (void)setState:(int)state;	// 0x60c161
// declared property setter: - (void)setSubtitlesProcessing:(BOOL)processing;	// 0x60c0a1
// declared property setter: - (void)setSubtitlesProcessingLock:(id)lock;	// 0x60c079
// declared property setter: - (void)setSubtitlesTrackIndex:(int)index;	// 0x60c0c9
// declared property setter: - (void)setTotalBytesTransferred:(long long)transferred;	// 0x60c1d1
// declared property setter: - (void)setTotalNumberOfStalls:(int)stalls;	// 0x60c3a9
// converted property setter: - (void)setTrickplay:(BOOL)trickplay;	// 0x60bf75
// declared property setter: - (void)setTrickplayIsOn:(BOOL)on;	// 0x60c3d1
// declared property getter: - (bool)stalled;	// 0x60c379
// declared property getter: - (int)state;	// 0x60c14d
- (void)stop:(double)stop;	// 0x606519
- (void)streamSelected:(int)selected streamIndex:(int)index;	// 0x606b69
// declared property getter: - (BOOL)subtitlesProcessing;	// 0x60c089
// declared property getter: - (id)subtitlesProcessingLock;	// 0x60c065
- (void)subtitlesSelect:(id)select;	// 0x607b09
- (void)subtitlesSelectAsync:(id)async;	// 0x60b2f1
// declared property getter: - (int)subtitlesTrackIndex;	// 0x60c0b9
// declared property getter: - (long long)totalBytesTransferred;	// 0x60c1b9
// declared property getter: - (int)totalNumberOfStalls;	// 0x60c399
- (id)trackWithCapitalizedDescriptionFromTrack:(id)track;	// 0x609051
// converted property getter: - (BOOL)trickplay;	// 0x60bf85
// declared property getter: - (BOOL)trickplayIsOn;	// 0x60c3b9
- (void)unpause:(double)unpause;	// 0x606429
- (void)updatePts:(double)pts;	// 0x606bf1
- (void)updatePts:(double)pts accessLogEvents:(id)events;	// 0x607141
- (void)updateSubtitleCheck;	// 0x608951
- (id)valueForRequestedM3u8:(id)requestedM3u8 forKey:(id)key;	// 0x607619
@end

